// Code generated by go-bindata.
// sources:
// tasks.cs
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tasksCs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7b\x73\x22\xb9\x11\xff\x1b\x7d\x8a\xce\xd4\xa5\x80\x2b\x33\xf8\xb1\x71\xce\x60\xbc\x81\xc1\xf6\x92\x35\x36\xb5\xb0\x76\xae\x96\xab\x2d\xa1\x69\x40\x67\x8d\x34\x91\x34\x3c\xe2\xf3\x77\x4f\x69\x66\x78\x18\xe3\xec\x26\x1b\x5c\x54\x21\xe9\xd7\xbf\x56\x77\x4b\xdd\x6a\x27\x86\xcb\x09\xf4\x97\xc6\x62\x54\x27\xdb\x23\xff\x52\x5a\xd4\xb1\xe6\x06\xfb\xa8\x67\x9c\xa1\xd9\x01\x7c\x4a\xa4\xe5\x11\xfa\x1d\x07\x54\xf1\x06\xf5\x12\xd6\xb9\xdb\x95\xc3\xb1\x40\x66\xb9\x92\x6f\x10\x7e\x50\xc6\x72\x39\xd9\x25\x6a\x2f\x25\x8d\x38\xab\x13\x42\x48\xf5\x67\xd2\x8c\xe3\x50\x45\x94\x4b\xe8\x52\x49\x27\xa8\x0f\x40\x28\xf5\x68\x60\xac\x34\x60\x34\xc2\x30\xc4\xd0\xad\xf1\x31\x1a\x0b\x4a\xc2\x8d\xa2\x21\xf9\xb9\x4a\xc8\x97\x40\x45\xf7\xdc\xf0\x91\xc0\x92\xd5\x09\x96\x7f\x23\x5f\xae\x13\x1e\x96\xbc\x93\xa3\xf6\x71\xeb\xec\xf4\xac\xf2\xd7\xd3\xc3\x5f\x2a\xef\x8e\x4f\x2f\x2b\x67\xed\x5f\x2e\x2b\xcd\xc3\xb3\xab\xe0\xac\xf9\x97\x66\x2b\x68\x7b\x0e\x1e\x08\x6a\x4c\x6a\xf9\x98\x32\x2c\xbd\x1c\x0e\x96\x31\xfa\xb7\x4a\x3a\x62\x12\x27\x23\xc1\x19\x18\xa4\x02\x43\x60\x0e\x08\xdd\x65\x33\x8e\xdb\xe9\xee\xf3\xcd\x43\x0d\x76\xa7\xc8\x13\x01\x20\x00\x00\x39\x85\x9a\xa1\xd6\x3c\x44\x98\x29\x1e\x42\x47\x72\xcb\xa9\xe0\xff\xc2\x5b\x9c\x67\x82\xa5\x35\x45\x1f\x6d\x12\x03\x5d\x0d\x3b\x72\xac\xca\x29\xd5\x13\x29\x14\xaa\xd5\x40\x49\xa3\x04\xfa\x0f\x9a\x5b\xbc\xe1\x12\x4b\xde\x5a\x14\x2a\xf0\x91\xb6\x94\x8a\xfe\xe4\x95\xeb\x29\x3a\xf7\xff\x03\x97\xa1\x9a\x1b\xff\x4a\xe9\xc8\xf8\x5d\x34\x86\x4e\xb0\xa5\x16\x7e\x7f\xaa\xe6\x25\xef\x23\x1d\x6d\x84\x48\xa1\xb0\x8a\x1a\xa7\x13\xe9\x02\xca\x8c\xdf\xd3\x8a\xa1\x31\x7e\xdf\x52\x6d\x4b\x1e\xa3\x82\xf9\xb8\x40\x27\x02\xf9\x47\xa3\x4d\xb4\xcc\xc6\xcf\xe4\x39\x8d\x74\x50\x1b\xe6\xba\x87\x5d\xce\xb4\x32\x6a\x6c\xfd\xdb\xcb\xc1\xf0\x4a\xd3\x08\xe7\x4a\x3f\x0e\x67\xef\xfc\x43\xff\xe4\xf0\xe4\xe8\x6c\xc8\x4c\x4a\x0a\x55\x4b\xf5\x04\x6d\x4d\xf0\x91\xa6\x7a\x09\x55\x95\xd8\x9a\xa5\xe6\xd1\xf8\xa1\x10\x90\xfd\x62\x86\x18\xb4\xd0\xec\xf5\xda\x77\xdd\x66\xe7\xf6\x6b\xb7\x79\xdb\xbc\xbe\xfc\xf4\xb5\xd9\xef\x36\x52\xc8\x01\xdc\xa3\x36\x5c\xc9\xc6\xa1\x9f\xfe\x1d\x40\x90\x08\x9b\x68\x6c\x48\x4c\xac\xa6\xe2\x00\x7a\x69\x7c\x3e\xe2\x72\xa0\x1e\x51\x36\x64\x22\xc4\x1b\xb4\x83\x5f\x7b\x97\x8d\xd7\xd1\x4f\xd1\xc1\x5d\xb7\x77\xf3\xb9\xff\x75\xa5\x6f\x63\x13\x21\x21\x0a\xd8\x72\x43\xe6\xdb\x93\xe3\xe1\xc0\x6d\x71\xb8\xb6\x6a\x0f\xee\x41\xcd\x4f\xdf\xbd\xc2\x11\xc2\x54\xbc\x84\xea\xaf\xb0\xf1\xc8\xf7\xf0\x7f\x4b\xea\x2d\x6d\xa4\xa7\xe6\xa8\xfb\x53\x14\x02\x2e\x17\x34\x8a\x05\xd6\xc8\x4f\x28\x67\xb5\xfd\xae\xf7\x7e\xc4\xf7\xde\x5b\xcc\x6f\x79\x3f\x85\xff\x27\xf7\x93\x81\xe6\x13\x77\x4b\xdd\xb1\x73\x17\x55\x70\x46\x5d\x06\x33\x84\x7c\xe9\xa7\xe6\xc0\x96\x85\x4d\x6d\x50\x52\x01\xff\x4c\x50\x2f\xe1\x37\x42\x26\x8c\xef\x75\xef\xcf\xe9\x49\xfd\x03\xae\xd1\x56\x7a\x97\xf0\x07\x3c\x4c\x51\x63\xe5\x6e\xf4\x3b\x32\x0b\x4f\x00\x3f\x7d\xf5\x3b\x51\xac\xb4\x35\x7e\x57\x85\x89\xc0\x5b\x1a\x21\x54\x02\x25\x2d\xe5\xd2\x80\x17\x19\xa6\x34\xa2\x73\xb3\x07\xcf\x84\x5c\x71\x81\x1f\xb8\xb1\x4a\x2f\xb3\x5b\xf0\x9e\x90\xcd\xa5\xf9\x8c\x33\xbf\xbf\x94\xcc\xc9\x6b\x25\x04\x6a\x07\x22\xa4\xa7\xd1\xa0\xb4\xa9\x49\x2e\xfb\x66\xb3\x8e\x25\xe4\x74\x92\x8d\x06\xe6\x21\x1e\x3f\xe8\x38\x1b\x7d\xc6\x59\x73\x82\xd2\xf6\x94\xe0\x6c\x79\x8d\x12\x35\xb5\x4a\x6f\x16\xe3\xb8\xab\x24\xdf\x9e\x1a\x60\x14\x0b\x6a\xb1\x45\x0d\x0a\x2e\xf1\xb5\xd0\x0a\x11\x28\x39\xe6\x93\x8e\xc5\x68\x07\xb3\x8e\xc3\x8c\x53\xb8\x93\x58\x71\xb9\x4b\x93\xc8\x4c\x2d\x4d\xcd\xfd\x9d\xce\xa8\x61\x9a\xc7\xb6\x46\x1b\x12\xe7\x7f\x3e\x3e\x6c\x32\xcb\x67\xf8\x8f\xcc\xa7\x25\x2f\x4f\x4b\xd9\xd0\x2b\xd7\x99\x50\x06\x4b\xe5\x3a\xd1\x89\x0c\x85\x38\x39\xde\xe5\xf1\x86\xbe\x3f\x74\x1a\x22\x71\xf0\x29\x91\x1f\x06\xdd\x9b\xad\x03\x00\x5e\xfd\xbf\x55\xb4\x36\xe2\x9e\x53\xf8\x7b\x3f\xd5\x42\x48\xb5\x0a\x33\xaa\x21\x5a\xd5\x2b\x63\xb5\xab\x7d\x66\xaa\x12\x11\xc2\x08\xe1\xf3\xe0\xaa\x72\x74\xea\x70\x79\xf4\x0c\xd8\x29\xba\xba\xa2\xd9\x14\x62\x6a\xa7\x69\xe5\x4b\x64\x44\xe5\x04\x43\x08\x85\x30\x44\xe2\x1c\x5e\xee\xab\xf8\x90\x69\xf4\xd3\xa3\x5a\x2c\xfb\x97\x72\xc6\xb5\x92\x11\x4a\x5b\x2a\xe6\x19\xba\x58\x2e\x15\x77\xee\x43\xb1\x0c\x0d\x28\x6e\x2e\x45\xb1\xfe\x23\xe4\x7b\x6f\x7d\xa6\x62\xf0\x03\x37\xff\xff\xbd\x29\x97\x30\xb2\x5d\xbd\xce\x1a\x45\xf7\x10\x71\x21\x53\xd0\x80\xd7\x5a\x5f\xc5\x1f\xaa\x55\x58\x45\xfe\x55\xf5\x4f\x9f\x26\x2e\xb6\x9d\x10\xa9\x10\xcb\x03\x98\x23\x30\x8d\xd4\x22\x50\x68\xdf\xdc\x1c\x40\xa8\x55\x0c\xdc\x02\x95\xcb\xb9\xcb\x12\x40\x65\x08\x42\xd1\xd0\x4d\x0a\xfe\x88\x90\x3f\x90\x1e\x34\x8d\x63\xd4\xbe\xef\xa7\x8c\x8e\xda\x40\xd3\x18\x8c\x46\x8e\x78\x94\x58\xc0\x45\x8c\xcc\x1a\x27\xc9\x65\x7a\x8c\xf6\x64\xa7\xec\x21\x95\x25\xeb\xf4\x77\x94\x6e\x36\x04\xa6\x42\x74\xec\xd5\x2a\x5c\x2b\x15\x3a\xe3\xcd\x01\x04\x37\x9f\xc0\x6a\x8e\x06\xac\x02\x8d\x46\x89\x19\x3a\x76\x93\x8c\x20\xe4\x1a\xe6\xdc\x4e\x41\xba\xf4\xa5\xc6\xee\x65\xe2\x03\x38\x86\x3e\x97\xec\x85\x7a\xb3\x4a\x8e\x69\x09\x00\x6e\x20\x31\xa8\x61\xae\xb9\xa5\x23\xe1\x14\x43\xad\x9c\x6a\x1b\x73\x19\x9a\xb5\x1b\x0c\xa8\x44\x03\xcd\xed\xf4\xc9\x8f\x9c\x84\x41\xb7\x97\x85\x3d\xa8\x0d\x87\x03\xa5\x84\x29\xd6\xc9\x8b\xeb\xd9\x80\xe2\xf9\xfb\x45\x24\x60\x96\x9f\x53\xef\xc8\x3f\xf4\x00\x25\x53\x21\x97\x93\x86\x97\x5d\x57\x0f\x8c\xa5\x32\xa4\x42\x49\x6c\x78\x4b\x34\xde\xfb\x8b\xf3\xd5\x1e\xd7\x6c\xf7\x2f\x38\x16\x91\x90\xa6\xe1\x25\x5a\xd6\x0c\x9b\x62\x44\x4d\x25\x5a\x65\xf0\x0a\x53\x51\x8d\x9a\xc8\x9f\x1d\xe5\x40\x37\x9a\x9d\x7c\x13\x7e\xe2\x6d\xf4\x76\x42\x94\x96\xdb\x65\x1a\x8d\xbc\xd4\x7a\x60\x97\x31\x36\xbc\x39\x97\x27\xc7\xde\xc6\xaa\xfc\xfa\x79\x50\xbd\x38\x0f\x31\x4b\x89\x5c\xc9\x8b\x56\xc2\x85\xcd\x62\x2a\xd4\x0c\x61\xb4\x84\x80\x1a\x5c\x42\x3f\x72\x73\x7f\x33\xc9\x68\x80\x08\xe7\xd5\x6d\xa1\x73\x26\x74\xfa\x52\x06\xc8\x75\x77\x97\xed\x9b\x1b\xff\x2e\x76\x49\xde\x95\x53\x0f\x00\x98\x30\x3c\x6c\x78\x4f\xdf\x7c\x8b\x07\xed\xe0\xd9\x09\xc4\x5a\x4d\x9c\xc4\x3e\x32\x9d\xf5\x14\x6b\x0f\x6f\x12\x98\x5b\xb5\x53\x8d\xd4\xc5\xab\xab\x42\x14\x0d\xaf\xa5\xec\x34\x35\x75\xcc\x05\x6e\xbb\x27\xad\xaf\x17\x70\x5e\x75\x0b\x17\xe7\xd5\x95\x2b\x2f\x5c\x16\x70\x07\x83\x2e\xf6\x67\x81\x4d\xed\x5d\x3d\x9f\x9b\xcc\x06\x76\xe1\xde\xbc\x84\x2e\xfc\x55\x7f\x32\xc0\x85\x3b\x54\xab\x13\x91\xb3\x86\x73\x47\x4b\x17\x7e\x90\xa6\x82\x35\xe9\xae\xa1\xe5\x3a\x59\x1f\x6d\x1b\xde\x25\x76\xeb\x65\x1f\xce\x17\xfe\x04\xed\x3d\x15\x09\x1e\x95\x3c\xea\x95\xbf\x17\x7d\x5c\x72\x50\xf7\x71\x4d\x13\x21\xc4\x39\xc4\xc4\x94\x21\xa4\x3b\x20\x4f\xa4\x00\xa4\x00\x7b\xda\xa9\x02\x7c\x6f\x43\x15\xb4\x03\x2f\x13\xf8\xee\x96\xaa\x00\x5f\x7a\x5a\x4d\x3a\xe1\x3e\x4f\xb8\xe5\xbc\x5f\xca\x7a\xad\xcd\x22\x54\xab\xb5\x55\x92\xcc\x5c\x49\x0a\x69\x43\x04\xee\x9b\x0b\x6d\xe0\xa5\xb2\x9b\x76\xeb\x05\xd8\xd3\x30\xf5\x15\x74\x2c\xb4\x70\xc2\xb3\x00\x14\x0a\xf0\xbc\xe2\xda\xe7\x91\xb5\x86\xbc\xb2\x6f\x62\xb2\x2a\xf5\x3d\xea\xfa\x19\x8b\x7a\x4b\xb1\x99\x73\xcb\xa6\x50\x7a\xb9\x98\xaf\x16\x80\x51\x83\xe0\x51\xaf\x96\x0d\xb3\xee\x09\xbc\x26\xcc\xa9\x01\x36\x55\x06\xa5\x57\x27\xdb\xd8\xd1\x2e\xb6\xf5\x36\x96\xed\x62\x83\x7d\xd8\x10\xc7\x34\x11\x76\x07\x7a\x67\xa7\xa8\x3d\xe7\x96\x82\x73\xcb\xff\xe4\x9a\xe3\xad\x10\xac\x78\xaf\xb4\x8a\xe0\xbe\xd5\x87\x7e\x86\xbd\x4a\x64\xfa\xbf\x04\xef\x65\x04\xb2\xaf\x6b\x21\xff\x1d\x00\x00\xff\xff\x2f\x8e\x8c\x27\xe3\x10\x00\x00")

func tasksCsBytes() ([]byte, error) {
	return bindataRead(
		_tasksCs,
		"tasks.cs",
	)
}

func tasksCs() (*asset, error) {
	bytes, err := tasksCsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tasks.cs", size: 4323, mode: os.FileMode(438), modTime: time.Unix(1578892173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tasks.cs": tasksCs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tasks.cs": &bintree{tasksCs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

